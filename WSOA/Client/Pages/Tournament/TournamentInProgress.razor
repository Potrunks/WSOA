@page "/tournament/inProgress/{SubSectionId:int}"
@using WSOA.Client.Pages.Tournament.Components;
@using WSOA.Client.Shared.Buttons.Main
@using WSOA.Client.Shared.Counters
@using WSOA.Client.Shared.Loaders
@using WSOA.Shared.Dtos;
@using WSOA.Shared.ViewModel;
@inherits TournamentInProgressComponent

@if (IsLoading)
{
    <CardCoinLoader />
}
else
{
    <div class="c-tournamentInProgress__container-main">
        <div class="c-tournamentInProgress__container-info">
            <div class="c-tournamentInProgress__subContainer-info">
                <div class="c-tournamentInProgress__heading-title">Date</div>
                <div class="c-tournamentInProgress__info">@TournamentInProgressViewModel.StartDate</div>
            </div>
            <div class="c-info__separator" />
            <div class="c-tournamentInProgress__subContainer-info">
                <div class="c-tournamentInProgress__heading-title">Tournoi n°</div>
                <div class="c-tournamentInProgress__info">@TournamentInProgressViewModel.TournamentNumber</div>
            </div>
            <div class="c-info__separator" />
            <div class="c-tournamentInProgress__subContainer-info">
                <div class="c-tournamentInProgress__heading-title">Saison</div>
                <div class="c-tournamentInProgress__info">@TournamentInProgressViewModel.Season</div>
            </div>
            <div class="c-info__separator" />
            <div class="c-tournamentInProgress__subContainer-info">
                <div class="c-tournamentInProgress__heading-title">Vainqueur tournoi précédent</div>
                <div class="c-tournamentInProgress__info">@TournamentInProgressViewModel.WinnerLastTournamentFullName</div>
            </div>
            <div class="c-info__separator" />
            <div class="c-tournamentInProgress__subContainer-info">
                <div class="c-tournamentInProgress__heading-title">1er de la saison</div>
                <div class="c-tournamentInProgress__info">@TournamentInProgressViewModel.FirstRankedFullName</div>
            </div>
            <div class="c-info__separator" />
            <div class="c-tournamentInProgress__subContainer-info">
                <div class="c-tournamentInProgress__heading-title">Jackpot</div>
                <div class="c-tournamentInProgress__jackpot-container">
                    <div class="c-tournamentInProgress__jackpot-total">@TournamentInProgressViewModel.TotalJackpot</div>
                    <div class="c-tournamentInProgress__jackpot-distribution">
                        @foreach (string winnableMoney in TournamentInProgressViewModel.WinnableMoneys)
                        {
                            <div class="c-tournamentInProgress__jackpot-amountByPosition">@winnableMoney</div>
                        }
                    </div>
                </div>
            </div>
            <div class="c-info__separator" />
            <div class="c-tournamentInProgress__subContainer-info">
                <div class="c-tournamentInProgress__heading-title">Etape</div>
                <div class="c-tournamentInProgress__info">@TournamentInProgressViewModel.Step</div>
            </div>
            <div class="c-tournamentInProgress__panelButtons">
                <MainButton
                    IsPrimary="true"
                    Label="Menu"
                    Type="button"
                    OnClick="() => ShowTournamentInProgressMenu.InvokeAsync()"/>
            </div>
        </div>
        <div class="c-tournamentInProgress__container-players">
            <div class="c-players__heading-title">Joueurs</div>
            <div class="c-players__heading-counter">@($"{PlayerPlayingsViewModel.Where(pla => !pla.IsEliminated).Count()} / {PlayerPlayingsViewModel.Count()}")</div>
            <div class="c-players__container-main">
                @foreach (PlayerPlayingViewModel player in PlayerPlayingsViewModel)
                {
                    <div class="c-player__separator" />
                    <div class="c-player__container-main @(player.HasBonusEarned ? "extended" : "") @(player.IsEliminated ? "flood" : "")" onclick="@(() => OpenPlayerActionsPopup.InvokeAsync(player))">
                        <div class="c-player__firstName">@player.FirstName</div>
                        <div class="c-player__lastName">@player.LastName</div>
                        <div class="c-player__totalReBuy">
                            <CascadingValue Value="@player.TotalRebuy" Name="LogoBadgeCounterValue">
                                <LogoBadgeCounter
                                    LogoPath="images/reload.png"
                                    LogoPixelSize="20"/>
                            </CascadingValue>
                        </div>
                        <div class="c-player__totalAddOn">
                            <CascadingValue Value="@player.TotalAddOn" Name="LogoBadgeCounterValue">
                                <LogoBadgeCounter
                                    LogoPath="images/plus.png"
                                    LogoPixelSize="20"/>
                            </CascadingValue>
                        </div>
                        @if (player.HasBonusEarned)
                        {
                            <div class="c-player__bonusEarneds">
                                @foreach (KeyValuePair<string, BonusTournamentEarnedDto> kvp in player.BonusTournamentEarnedByBonusTournamentCode)
                                {
                                    <CascadingValue Value="@kvp.Value.Occurence" Name="LogoBadgeCounterValue">
                                        <LogoBadgeCounter LogoPath="@kvp.Value.LogoPath"
                                          LogoPixelSize="20" />
                                    </CascadingValue>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="c-tournamentInProgress__container-timer"></div>
    </div>
}
